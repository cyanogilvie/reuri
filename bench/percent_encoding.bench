if {"bench" ni [info commands bench]} {
	package require bench
	namespace import bench::*
}

package require reuri

set here    [file dirname [file normalize [info script]]]
source [file join $here ../ref/urlencode-1.0.tm]
package provide urlencode 1.0

# Hack urlencode to use uppercase % encoding to match reuri
foreach v {
	uri_charmap
	uri_charmap_compat
	uri_charmap_path
	uri_charmap_path_compat
} {
	set ::urlencode::_uri::$v [lmap t [set ::urlencode::_uri::$v] {if {[string length $t] > 1} {string toupper $t} else {set t}}]
}

proc main {} {
	bench percent_encoding-1.1 {Encode a query part, completely unreserved} -batch auto -setup { #<<<
        set val     foo
	} -overhead {
		* {return -level 0 $val}
	} -compare {
		urlencode { urlencode::rfc_urlencode -- $val }
		reuri     { reuri::uri encode query $val }
	} -cleanup {
		unset -nocomplain val
	} -result foo
	#>>>
	bench percent_encoding-2.1 {Encode a query part, single reserved char} -batch auto -setup { #<<<
        set val     fo=o
	} -overhead {
		* {return -level 0 $val}
	} -compare {
		urlencode { urlencode::rfc_urlencode -- $val }
		reuri     { reuri::uri encode query $val }
	} -cleanup {
		unset -nocomplain val
	} -result fo%3Do
	#>>>
	bench percent_encoding-3.1 {Encode a query part, multiple reserved chars} -batch auto -setup { #<<<
        set val     f\x00o=o
	} -overhead {
		* {return -level 0 $val}
	} -compare {
		urlencode { urlencode::rfc_urlencode -- $val }
		reuri     { reuri::uri encode query $val }
	} -cleanup {
		unset -nocomplain val
	} -result f%00o%3Do
	#>>>
	bench percent_encoding-4.1 {Encode a query part, all codepoints from 0 to 255 and 0x306f} -batch auto -setup { #<<<
		set testchars   ""
		for {set i 0} {$i < 255} {incr i} {
			append testchars    [format %c $i]
		}
		append testchars    \u306f
	} -overhead {
		* {return -level 0 $testchars}
	} -compare {
		urlencode { urlencode::rfc_urlencode -- $testchars }
		reuri     { reuri::uri encode query $testchars }
	} -cleanup {
		unset -nocomplain testchars
	} -results {
		urlencode	{%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20!%22%23%24%25%26'()*%2B%2C-./0123456789%3A%3B%3C%3D%3E%3F%40ABCDEFGHIJKLMNOPQRSTUVWXYZ%5B%5C%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D~%7F%C2%80%C2%81%C2%82%C2%83%C2%84%C2%85%C2%86%C2%87%C2%88%C2%89%C2%8A%C2%8B%C2%8C%C2%8D%C2%8E%C2%8F%C2%90%C2%91%C2%92%C2%93%C2%94%C2%95%C2%96%C2%97%C2%98%C2%99%C2%9A%C2%9B%C2%9C%C2%9D%C2%9E%C2%9F%C2%A0%C2%A1%C2%A2%C2%A3%C2%A4%C2%A5%C2%A6%C2%A7%C2%A8%C2%A9%C2%AA%C2%AB%C2%AC%C2%AD%C2%AE%C2%AF%C2%B0%C2%B1%C2%B2%C2%B3%C2%B4%C2%B5%C2%B6%C2%B7%C2%B8%C2%B9%C2%BA%C2%BB%C2%BC%C2%BD%C2%BE%C2%BF%C3%80%C3%81%C3%82%C3%83%C3%84%C3%85%C3%86%C3%87%C3%88%C3%89%C3%8A%C3%8B%C3%8C%C3%8D%C3%8E%C3%8F%C3%90%C3%91%C3%92%C3%93%C3%94%C3%95%C3%96%C3%97%C3%98%C3%99%C3%9A%C3%9B%C3%9C%C3%9D%C3%9E%C3%9F%C3%A0%C3%A1%C3%A2%C3%A3%C3%A4%C3%A5%C3%A6%C3%A7%C3%A8%C3%A9%C3%AA%C3%AB%C3%AC%C3%AD%C3%AE%C3%AF%C3%B0%C3%B1%C3%B2%C3%B3%C3%B4%C3%B5%C3%B6%C3%B7%C3%B8%C3%B9%C3%BA%C3%BB%C3%BC%C3%BD%C3%BE%E3%81%AF}
		reuri		{%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20!%22%23$%25%26'()*+,-./0123456789:;%3C%3D%3E?@ABCDEFGHIJKLMNOPQRSTUVWXYZ%5B%5C%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D~%7F%C2%80%C2%81%C2%82%C2%83%C2%84%C2%85%C2%86%C2%87%C2%88%C2%89%C2%8A%C2%8B%C2%8C%C2%8D%C2%8E%C2%8F%C2%90%C2%91%C2%92%C2%93%C2%94%C2%95%C2%96%C2%97%C2%98%C2%99%C2%9A%C2%9B%C2%9C%C2%9D%C2%9E%C2%9F%C2%A0%C2%A1%C2%A2%C2%A3%C2%A4%C2%A5%C2%A6%C2%A7%C2%A8%C2%A9%C2%AA%C2%AB%C2%AC%C2%AD%C2%AE%C2%AF%C2%B0%C2%B1%C2%B2%C2%B3%C2%B4%C2%B5%C2%B6%C2%B7%C2%B8%C2%B9%C2%BA%C2%BB%C2%BC%C2%BD%C2%BE%C2%BF%C3%80%C3%81%C3%82%C3%83%C3%84%C3%85%C3%86%C3%87%C3%88%C3%89%C3%8A%C3%8B%C3%8C%C3%8D%C3%8E%C3%8F%C3%90%C3%91%C3%92%C3%93%C3%94%C3%95%C3%96%C3%97%C3%98%C3%99%C3%9A%C3%9B%C3%9C%C3%9D%C3%9E%C3%9F%C3%A0%C3%A1%C3%A2%C3%A3%C3%A4%C3%A5%C3%A6%C3%A7%C3%A8%C3%A9%C3%AA%C3%AB%C3%AC%C3%AD%C3%AE%C3%AF%C3%B0%C3%B1%C3%B2%C3%B3%C3%B4%C3%B5%C3%B6%C3%B7%C3%B8%C3%B9%C3%BA%C3%BB%C3%BC%C3%BD%C3%BE%E3%81%AF}
	}
	#>>>
	bench percent_encoding-10.1 {Encode a query string, no substitutions} -batch auto -setup { #<<<
		set params	{lane jewelry q estate ipp 180 page 3 style 4}
	} -overhead {
		* {return -level 0 $params}
	} -compare {
		urlencode_list { urlencode::encode_query $params }
		urlencode_args { urlencode::encode_query {*}$params }
		reuri_list     { reuri::query encode     $params }
		reuri_args     { reuri::query encode     {*}$params }
	} -cleanup {
		unset -nocomplain params
	} -result ?lane=jewelry&q=estate&ipp=180&page=3&style=4
	#>>>
	bench percent_encoding-10.2 {Encode a query string, substitutions} -batch auto -setup { #<<<
		set params	{lane a&c q {estate rings} ipp 180 page 3 +style 4}
	} -overhead {
		* {return -level 0 $params}
	} -compare {
		urlencode_list { urlencode::encode_query $params    }
		urlencode_args { urlencode::encode_query {*}$params }
		reuri_list     { reuri::query encode     $params    }
		reuri_args     { reuri::query encode     {*}$params }
	} -cleanup {
		unset -nocomplain params
	} -results {
		urlencode_*	?lane=a%26c&q=estate%20rings&ipp=180&page=3&%2Bstyle=4
		reuri_*		?lane=a%26c&q=estate%20rings&ipp=180&page=3&+style=4
	}
	#>>>
	bench percent_encoding-20.1 {Decode a query string, no substitutions} -batch auto -setup { #<<<
		set query		lane=jewelry&q=estate&ipp=180&page=3&style=4
		set q1			[string range $query 0 10]
		set q2			[string range $query 11 end]
	} -overhead {
		urlencode_reparse - reuri_reparse	{return -level 0 $q1$q2}
		urlencode_reuse - reuri_reuse		{return -level 0 $query}
	} -compare {
		urlencode_reparse { urlencode::decode_query $q1$q2 }
		urlencode_reuse   { urlencode::decode_query $query }
		reuri_reparse     { reuri::query decode     $q1$q2 }
		reuri_reuse       { reuri::query decode     $query }
	} -cleanup {
		unset -nocomplain query q1 q2
	} -result {lane jewelry q estate ipp 180 page 3 style 4}
	#>>>
	bench percent_encoding-20.2 {Decode a query string, substitutions} -batch auto -setup { #<<<
		set query	lane=a%26c&q=estate%20rings&ipp=180&page=3&%2Bstyle=4
		set q1			[string range $query 0 10]
		set q2			[string range $query 11 end]
	} -overhead {
		urlencode_reparse - reuri_reparse	{return -level 0 $q1$q2}
		urlencode_reuse - reuri_reuse		{return -level 0 $query}
	} -compare {
		urlencode_reparse { urlencode::decode_query $q1$q2 }
		urlencode_reuse   { urlencode::decode_query $query }
		reuri_reparse     { reuri::query decode     $q1$q2 }
		reuri_reuse       { reuri::query decode     $query }
	} -cleanup {
		unset -nocomplain query q1 q2
	} -result {lane a&c q {estate rings} ipp 180 page 3 +style 4}
	#>>>
}

main

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
