%prefix "idx"

%value "struct idx_rule_val "
%auxil "struct parse_idx_cx* "

%header {
#include "reuriInt.h"

	struct idx_rule_val {
		union {
			struct idx_range	range;
			struct idx_atom		atom;
			long long			val;
		};
	};
}

%source {
#define NOT_RANGE	throw(auxil, "NOT_RANGE",	_0e);
#define NOT_ATOM	throw(auxil, "NOT_ATOM",	_0e);
#define NOT_NUM		throw(auxil, "NOT_NUM",		_0e);

#define PCC_GETCHAR(auxil)	(int)(*auxil->p ? *(auxil->p++) : -1)
#define PCC_ERROR(auxil)	throw(auxil, "GRAMMAR", 0)

#if 0
	static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
	fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)
#endif
}

list	<-	  list END
		    / list ',' r:range ~{NOT_RANGE}		{ push_range(auxil, &r.range); }
			/ r:range ~{NOT_RANGE}				{ push_range(auxil, &r.range); }

range	<-	  f:atom '..' t:atom ~{NOT_ATOM}	{ $$.range.from = f.atom; $$.range.to = t.atom;        }
			/ f:atom ~{NOT_ATOM}				{ $$.range.from = f.atom; $$.range.to.type = IDX_NONE; }

atom	<-	  'end+' v:number ~{NOT_NUM}		{ $$.atom.type = IDX_ENDREL; $$.atom.val =  v.atom.val; }
			/ 'end-' v:number ~{NOT_NUM}		{ $$.atom.type = IDX_ENDREL; $$.atom.val = -v.atom.val; }
			/   '-'  v:number ~{NOT_NUM}		{ $$.atom.type = IDX_ABS;    $$.atom.val = -v.atom.val; }
			/   '+'? v:number ~{NOT_NUM}		{ $$.atom.type = IDX_ABS;    $$.atom.val =  v.atom.val; }

number	<-	  '0x' < hex+ >						{ $$.atom.val = strtoll($1, NULL, 16); }
			/ '0b' < bit+ >						{ $$.atom.val = strtoll($2, NULL, 2);  }
			/ '0'  < octal+ >					{ $$.atom.val = strtoll($3, NULL, 8);  }
			/      < decimal+ >					{ $$.atom.val = strtoll($4, NULL, 10); }

decimal	<-	  [0-9]
hex		<-	  [0-9a-fA-F]
octal	<-	  [0-7]
bit		<-	  [01]
END		<-	  !.

%%
enum parse_status parse_idx_packcc(struct parse_idx_cx* auxil)
{
	if (setjmp(auxil->exception)) goto exception;

	idx_context_t*	ctx = idx_create(auxil);
	while (idx_parse(ctx, NULL));
	idx_destroy(ctx);

	return auxil->rc;

exception:
	free_set(auxil);
	return auxil->rc;
}

// vim: foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
