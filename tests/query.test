if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

tcltest::loadTestedCommands
package require reuri

set t	query_values
test $t-1.0.0 {empty}			{ reuri::query values {} foo					} {}
test $t-1.0.1 {empty}			{ reuri::query values {?} foo					} {}
test $t-1.1 {missing}			{ reuri::query values {?xyz=a} foo				} {}
test $t-1.2 {exists, single}	{ reuri::query values {?foo=a} foo				} a
test $t-1.3 {exists, multiple}	{ reuri::query values {?foo=a&foo=bar} foo		} {a bar}
test $t-1.4 {exists, multiple}	{ reuri::query values {?foo=a&x=y&foo=bar} foo	} {a bar}
test $t-2.1 {%00}				{ reuri::query values {?f%00oo=a%00b} f\0oo		} a\0b
test $t-2.2 {bad %}				{ reuri::query values {?f%0oo=a%0x} f%0oo		} a%0x
test $t-2.3 {bad %}				{ reuri::query values {?f%oo=a%x} f%oo			} a%x
test $t-2.4 {%00}				{ reuri::query values {?f%00=a%00} f\0			} a\0
test $t-2.5 {%00}				{ reuri::query values {?f%00} f\0				} {{}}
test $t-2.5 {no val}			{ reuri::query values {?foo} foo				} {{}}
test $t-2.6 {no name}			{ reuri::query values {?=foo} {}				} {foo}
test $t-2.7 {no name}			{ reuri::query values {?=foo&} {}				} {foo {}}
test $t-2.8 {no name}			{ reuri::query values {?} {}					} {}

set t	uri_query_values
test $t-1.0.0 {empty}			{ reuri::uri query values {} foo					} {}
test $t-1.0.1 {empty}			{ reuri::uri query values {?} foo					} {}
test $t-1.0.2 {empty}			{ reuri::uri query values {http:} foo				} {}
test $t-1.0.3 {empty}			{ reuri::uri query values {http:?} foo				} {}
test $t-1.1 {missing}			{ reuri::uri query values {http://localhost/a?xyz=a} foo				} {}
test $t-1.2 {exists, single}	{ reuri::uri query values {http://localhost/a?foo=a} foo				} a
test $t-1.3 {exists, multiple}	{ reuri::uri query values {http://localhost/a?foo=a&foo=bar} foo		} {a bar}
test $t-1.4 {exists, multiple}	{ reuri::uri query values {http://localhost/a?foo=a&x=y&foo=bar} foo	} {a bar}

set t	query_exists
test $t-1.0.0 {empty}			{ reuri::query exists {} foo					} 0
test $t-1.0.1 {empty}			{ reuri::query exists {?} foo					} 0
test $t-1.1 {missing}			{ reuri::query exists {?xyz=a} foo				} 0
test $t-1.2 {exists, single}	{ reuri::query exists {?foo=a} foo				} 1
test $t-1.3 {exists, multiple}	{ reuri::query exists {?foo=a&foo=bar} foo		} 1
test $t-1.4 {exists, multiple}	{ reuri::query exists {?foo=a&x=y&foo=bar} foo	} 1
test $t-1.5 {exists, multiple}	{ reuri::query exists {foo=a&x=y&foo=bar} foo	} 1
test $t-1.6 {exists, multiple}	{ reuri::query exists {foo=a&x=y&foo=bar} bar	} 0

set t	uri_query_exists
test $t-1.0.0 {empty}			{ reuri::uri query exists {} foo					} 0
test $t-1.0.1 {empty}			{ reuri::uri query exists {?} foo					} 0
test $t-1.1 {missing}			{ reuri::uri query exists {?xyz=a} foo				} 0
test $t-1.2 {exists, single}	{ reuri::uri query exists {?foo=a} foo				} 1
test $t-1.3 {exists, multiple}	{ reuri::uri query exists {?foo=a&foo=bar} foo		} 1
test $t-1.4 {exists, multiple}	{ reuri::uri query exists {?foo=a&x=y&foo=bar} foo	} 1
test $t-1.5 {exists, multiple}	{ reuri::uri query exists {http://localhost/x?foo=a&x=y&foo=bar} foo	} 1
test $t-1.6 {exists, multiple}	{ reuri::uri query exists {http://localhost/x?foo=a&x=y&foo=bar} bar	} 0

set t	query_names
test $t-1.0.0 {empty}			{ reuri::query names {}						} {}
test $t-1.0.1 {empty}			{ reuri::query names {?}					} {}
test $t-1.1 {missing}			{ reuri::query names {?xyz=a}				} xyz
test $t-1.2 {exists, single}	{ reuri::query names {?foo=a}				} foo
test $t-1.3 {exists, multiple}	{ reuri::query names {?foo=a&foo=bar}		} {foo foo}
test $t-1.4 {exists, multiple}	{ reuri::query names {?foo=a&x=y&foo=bar}	} {foo x foo}

set t	uri_query_names
test $t-1.0.0 {empty}			{ reuri::uri query names {}						} {}
test $t-1.0.1 {empty}			{ reuri::uri query names {?}					} {}
test $t-1.0.1 {empty}			{ reuri::uri query names {http:}				} {}
test $t-1.0.3 {empty}			{ reuri::uri query names {http://localhost/z}	} {}
test $t-1.0.4 {empty}			{ reuri::uri query names {http://localhost/z?}	} {}
test $t-1.1 {missing}			{ reuri::uri query names {http://localhost/z?xyz=a}				} xyz
test $t-1.2 {exists, single}	{ reuri::uri query names {http://localhost/z?foo=a}				} foo
test $t-1.3 {exists, multiple}	{ reuri::uri query names {http://localhost/z?foo=a&foo=bar}		} {foo foo}
test $t-1.4 {exists, multiple}	{ reuri::uri query names {http://localhost/z?foo=a&x=y&foo=bar}	} {foo x foo}

set t	query_get
test $t-1.0.0.0 {empty}	-body   { reuri::query get {} foo						} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-1.0.0.1 {empty} -body	{ reuri::query get {} foo -default				} -returnCodes error -errorCode {TCL ARGUMENT MISSING} -result {missing argument to "-default"}
test $t-1.0.0.1 {empty}			{ reuri::query get {} foo -default def			} def
test $t-1.0.1.0 {empty}	-body   { reuri::query get {?} foo						} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-1.0.1.1 {empty}			{ reuri::query get {?} foo -default def			} def
test $t-1.1.0 {missing} -body	{ reuri::query get {?xyz=a} foo					} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-1.1.1 {missing}			{ reuri::query get {?xyz=a} foo -default def	} def
test $t-1.2.0 {exists, single}	{ reuri::query get {?foo=a} foo					} a
test $t-1.2.1 {exists, single}	{ reuri::query get {?foo=a} foo	-default def	} a
test $t-1.3 {exists, multiple}	{ reuri::query get {?foo=a&foo=bar} foo			} bar
test $t-1.4 {exists, multiple}	{ reuri::query get {?foo=a&x=y&foo=bar} foo		} bar
test $t-2.0.0 {empty}			{ reuri::query get {}							} {}
test $t-2.0.1 {empty}			{ reuri::query get {?}							} {}
test $t-2.1 {missing}			{ reuri::query get {?xyz=a}						} {xyz a}
test $t-2.2 {exists, single}	{ reuri::query get {?foo=a}						} {foo a}
test $t-2.3 {exists, multiple}	{ reuri::query get {?foo=a&foo=bar}				} {foo a foo bar}
test $t-2.4 {exists, multiple}	{ reuri::query get {?foo=a&x=y&foo=bar}			} {foo a x y foo bar}
test $t-2.5 {exists, multiple}	{ reuri::query get {foo=a&x=y&foo=bar}			} {foo a x y foo bar}
test $t-2.6 {exists, novals}	{ reuri::query get {foo&bar}					} {foo {} bar {}}
if 0 {
test $t-3.0 {exists, multiple}	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index 0	} a
test $t-3.1 {exists, multiple}	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index 1	} bar
test $t-3.2 {exists, multiple}	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index 2	} z
test $t-3.3 {exists, multiple}	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index end	} z
test $t-3.4 {exists, multiple}	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index end-1	} bar
test $t-3.5.1 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index 3				} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo"[3] doesn't exist}
test $t-3.5.2 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index 3 -default def	} -result def
test $t-3.5.3 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index end+1			} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo"[end+1] doesn't exist}
test $t-3.5.4 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index end+1 -default def		} -result def
test $t-3.5.5 {exists, multiple}		{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foo -index 3 -default def			} def
test $t-3.6 {exists, multiple}			{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foox -index 0..end -default def	} {}
test $t-3.7 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foox -index 0..0					} {}
test $t-3.8.1 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foox -index 0..0,1				} -returnCodes error -errorCode {REURI PARAM_NOT_SET foox} -result {param "foox"[1] doesn't exist}
test $t-3.8.2 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foox -index 0..0,1 -default def	} -result def
test $t-3.8.3 {exists, multiple} -body	{ reuri::query get {?foo=a&x=y&foo=bar&foo=z} foox -index 2,0..0,1 -default def	} -result {def def}
}
test $t-4.1 {unicode}	{ reuri::query get fo\u306fo=b\u306far	} [list fo\u306fo b\u306far]
test $t-4.2 {null}		{ reuri::query get fo\0o=b\0ar			} [list fo\0o b\0ar]
test $t-4.3 {?}			{ reuri::query get fo?o=b?ar			} [list fo?o b?ar]
test $t-4.4 {/}			{ reuri::query get fo/o=b/ar			} [list fo/o b/ar]
test $t-4.5 {hash}		{ reuri::query get fo#o=b#ar			} [list fo#o b#ar]

set t	uri_query_get
test $t-1.0.0 {empty}		{ reuri::uri query get {}									} {}
test $t-1.0.1 {empty}		{ reuri::uri query get http:								} {}
test $t-1.0.2 {empty}		{ reuri::uri query get http://localhost						} {}
test $t-1.0.3 {empty}		{ reuri::uri query get http://localhost/foo					} {}
test $t-1.0.4 {empty}		{ reuri::uri query get http://localhost/foo#frag			} {}
test $t-1.0.5 {empty}		{ reuri::uri query get /foo/bar								} {}
test $t-1.0.6 {empty}		{ reuri::uri query get foo/bar								} {}
test $t-1.0.7 {empty}		{ reuri::uri query get #frag								} {}
test $t-1.1.0 {simple}		{ reuri::uri query get http://localhost/foo?foo=bar&x=y		} {foo bar x y}
test $t-1.1.1 {simple}		{ reuri::uri query get /foo?foo=bar&x=y						} {foo bar x y}
test $t-1.1.2 {simple}		{ reuri::uri query get foo?foo=bar&x=y						} {foo bar x y}
test $t-1.1.3 {multiple}	{ reuri::uri query get foo?foo=bar&x=y&foo=baz				} {foo bar x y foo baz}
test $t-1.1.4 {multiple}	{ reuri::uri query get foo?foo=bar&x=y&foo=baz#frag			} {foo bar x y foo baz}
test $t-1.1.5 {multiple}	{ reuri::uri query get ?foo=bar&x=y&foo=baz					} {foo bar x y foo baz}
test $t-1.1.6 {multiple}	{ reuri::uri query get ?foo=bar&x=y&foo=baz#frag			} {foo bar x y foo baz}
test $t-2.0.0 {empty}		-body { reuri::uri query get {} foo									} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.0.1 {empty}		-body { reuri::uri query get http: foo								} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.0.2 {empty}		-body { reuri::uri query get http://localhost foo					} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.0.3 {empty}		-body { reuri::uri query get http://localhost/foo foo				} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.0.4 {empty}		-body { reuri::uri query get http://localhost/foo#frag foo			} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.0.5 {empty}		-body { reuri::uri query get /foo/bar foo							} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.0.6 {empty}		-body { reuri::uri query get foo/bar foo							} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.0.7 {empty}		-body { reuri::uri query get #frag foo								} -returnCodes error -errorCode {REURI PARAM_NOT_SET foo} -result {param "foo" doesn't exist}
test $t-2.1.0 {simple}		-body { reuri::uri query get http://localhost/foo?foo=bar&x=y foo	} -result bar
test $t-2.1.1 {simple}		-body { reuri::uri query get /foo?foo=bar&x=y foo					} -result bar
test $t-2.1.2 {simple}		-body { reuri::uri query get foo?foo=bar&x=y foo					} -result bar
test $t-2.1.3 {multiple}	-body { reuri::uri query get foo?foo=bar&x=y&foo=baz foo			} -result baz
test $t-2.1.4 {multiple}	-body { reuri::uri query get foo?foo=bar&x=y&foo=baz#frag foo		} -result baz
test $t-2.1.5 {multiple}	-body { reuri::uri query get ?foo=bar&x=y&foo=baz foo				} -result baz
test $t-2.1.6 {multiple}	-body { reuri::uri query get ?foo=bar&x=y&foo=baz#frag foo			} -result baz
test $t-3.0.0 {empty}		-body { reuri::uri query get {} foo -default def								} -result def
test $t-3.0.1 {empty}		-body { reuri::uri query get http: foo -default def								} -result def
test $t-3.0.2 {empty}		-body { reuri::uri query get http://localhost foo -default def					} -result def
test $t-3.0.3 {empty}		-body { reuri::uri query get http://localhost/foo foo -default def				} -result def
test $t-3.0.4 {empty}		-body { reuri::uri query get http://localhost/foo#frag foo -default def			} -result def
test $t-3.0.5 {empty}		-body { reuri::uri query get /foo/bar foo -default def							} -result def
test $t-3.0.6 {empty}		-body { reuri::uri query get foo/bar foo -default def							} -result def
test $t-3.0.7 {empty}		-body { reuri::uri query get #frag foo -default def								} -result def
test $t-3.1.0 {simple}		-body { reuri::uri query get http://localhost/foo?foo=bar&x=y foo -default def	} -result bar
test $t-3.1.1 {simple}		-body { reuri::uri query get /foo?foo=bar&x=y foo -default def					} -result bar
test $t-3.1.2 {simple}		-body { reuri::uri query get foo?foo=bar&x=y foo -default def					} -result bar
test $t-3.1.3 {multiple}	-body { reuri::uri query get foo?foo=bar&x=y&foo=baz foo -default def			} -result baz
test $t-3.1.4 {multiple}	-body { reuri::uri query get foo?foo=bar&x=y&foo=baz#frag foo -default def		} -result baz
test $t-3.1.5 {multiple}	-body { reuri::uri query get ?foo=bar&x=y&foo=baz foo -default def				} -result baz
test $t-3.1.6 {multiple}	-body { reuri::uri query get ?foo=bar&x=y&foo=baz#frag foo -default def			} -result baz

set t	query_add
set std	{apply {init {list -setup [list set q $init] -cleanup {unset -nocomplain q}}}}
test $t-0.1 {var not set}	-setup {unset -nocomplain q} -body {reuri::query add q foo bar; set q		} -result foo=bar				-cleanup {unset -nocomplain q}
test $t-0.2 {dup}			-setup {set q x=y}  -body {set d $q; reuri::query add q foo bar; list $d $q	} -result {x=y x=y&foo=bar}		-cleanup {unset -nocomplain d q}
test $t-0.3 {dup}			-setup {set q ?x=y} -body {set d $q; reuri::query add q foo bar; list $d $q	} -result {?x=y x=y&foo=bar}	-cleanup {unset -nocomplain d q}
test $t-0.4 {dup}			-setup {set q x=y}  -body {set d $q; reuri::query add q foo bar; list $d $q	} -result {x=y x=y&foo=bar}		-cleanup {unset -nocomplain d q}
test $t-1.1	{empty}	{*}[{*}$std {}]		-body { list [reuri::query add q foo bar] $q	} -result {foo=bar foo=bar}
test $t-1.2	{empty}	{*}[{*}$std ?]		-body { list [reuri::query add q foo bar] $q	} -result {foo=bar foo=bar}
test $t-2.1	{other}	{*}[{*}$std ?x=y]	-body { reuri::query add q foo bar; set q		} -result x=y&foo=bar
test $t-2.2	{same}	{*}[{*}$std ?foo=x]	-body { reuri::query add q foo bar; set q		} -result foo=x&foo=bar
test $t-3.1	{index}	{*}[{*}$std ?foo=x]	-body { reuri::query add q foo bar; reuri::query values $q foo	} -result {x bar}
test $t-4.1	{encoding}	{*}[{*}$std {}]	-body { reuri::query add q f=o b&ar				} -result f%3Do=b%26ar
test $t-4.2	{unicode}	{*}[{*}$std {}]	-body { reuri::query add q f\0o b\u306far		} -result f%00o=b%E3%81%AFar
test $t-6.1	{trace} -setup { #<<<
	unset -nocomplain q
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query add q f\0o b\u306far] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace:f%00o=b%E3%81%AFar trace:f%00o=b%E3%81%AFar]
#>>>
test $t-6.2	{trace} -setup { #<<<
	set q	{}
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query add q f\0o b\u306far] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace:f%00o=b%E3%81%AFar trace:f%00o=b%E3%81%AFar]
#>>>
test $t-6.3	{trace} -setup { #<<<
	set q	x=y
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query add q f\0o b\u306far] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace:x=y&f%00o=b%E3%81%AFar trace:x=y&f%00o=b%E3%81%AFar]
#>>>

set t	uri_query_add
set std	{apply {init {list -setup [list set u $init] -cleanup {unset -nocomplain u}}}}
test $t-0.1 {var not set}	-setup {unset -nocomplain u} -body {reuri::uri query add u foo bar; set u			} -result ?foo=bar						-cleanup {unset -nocomplain u}
test $t-0.3 {dup}			-setup {set u /xyz?x=y} -body {set d $u; reuri::uri query add u foo bar; list $d $u	} -result {/xyz?x=y /xyz?x=y&foo=bar}	-cleanup {unset -nocomplain d u}
test $t-1.1	{empty}	{*}[{*}$std {}]			-body { list [reuri::uri query add u foo bar] $u	} -result {?foo=bar ?foo=bar}
test $t-1.2	{empty}	{*}[{*}$std ?]			-body { list [reuri::uri query add u foo bar] $u	} -result {?foo=bar ?foo=bar}
test $t-1.3	{empty}	{*}[{*}$std http:?]		-body { list [reuri::uri query add u foo bar] $u	} -result {http:?foo=bar http:?foo=bar}
test $t-1.4	{empty}	{*}[{*}$std /a?]		-body { list [reuri::uri query add u foo bar] $u	} -result {/a?foo=bar /a?foo=bar}
test $t-2.1	{other}	{*}[{*}$std /a?x=y]		-body { reuri::uri query add u foo bar; set u		} -result /a?x=y&foo=bar
test $t-2.2	{same}	{*}[{*}$std /a?foo=x]	-body { reuri::uri query add u foo bar; set u		} -result /a?foo=x&foo=bar
test $t-3.1	{index}	{*}[{*}$std /a?foo=x]	-body { reuri::uri query add u foo bar; reuri::uri query values $u foo	} -result {x bar}
test $t-4.1	{encoding}	{*}[{*}$std /a]		-body { reuri::uri query add u f=o b&ar				} -result /a?f%3Do=b%26ar
test $t-4.2	{unicode}	{*}[{*}$std /a]		-body { reuri::uri query add u f\0o b\u306far		} -result /a?f%00o=b%E3%81%AFar
test $t-5.1	{uri get}	{*}[{*}$std /a?x=y]	-body { reuri::uri query add u f\0o b\u306far; reuri::uri extract $u query		} -result x=y&f%00o=b%E3%81%AFar
test $t-6.1	{trace} -setup { #<<<
	unset -nocomplain u
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query add u f\0o b\u306far] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace:?f%00o=b%E3%81%AFar trace:?f%00o=b%E3%81%AFar]
#>>>
test $t-6.2	{trace} -setup { #<<<
	set u	/a
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query add u f\0o b\u306far] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace:/a?f%00o=b%E3%81%AFar trace:/a?f%00o=b%E3%81%AFar]
#>>>
test $t-6.3	{trace} -setup { #<<<
	set u	/a?x=y
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query add u f\0o b\u306far] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace:/a?x=y&f%00o=b%E3%81%AFar trace:/a?x=y&f%00o=b%E3%81%AFar]
#>>>

set t	query_unset
set std	{apply {init {list -setup [list set q $init] -cleanup {unset -nocomplain q}}}}
test $t-0.1 {var not set}	-setup {unset -nocomplain q} -body {reuri::query unset q foo; set q					} -result {}					-cleanup {unset -nocomplain q}
test $t-0.2 {dup}			-setup {set q x=y&foo=bar}  -body {set d $q; reuri::query unset q foo; list $d $q	} -result {x=y&foo=bar x=y}		-cleanup {unset -nocomplain d q}
test $t-0.3 {dup}			-setup {set q ?x=y&foo=bar} -body {set d $q; reuri::query unset q foo; list $d $q	} -result {?x=y&foo=bar x=y}	-cleanup {unset -nocomplain d q}
test $t-0.4 {dup}			-setup {set q x=y&foo=bar}  -body {set d $q; reuri::query unset q foo; list $d $q	} -result {x=y&foo=bar x=y}		-cleanup {unset -nocomplain d q}
test $t-1.1	{empty}	{*}[{*}$std {}]		-body { list [reuri::query unset q foo] $q	} -result {{} {}}
test $t-1.2	{empty}	{*}[{*}$std ?]		-body { list [reuri::query unset q foo] $q	} -result {{} {}}
test $t-2.1	{other}	{*}[{*}$std ?x=y]	-body { reuri::query unset q foo; set q		} -result x=y
test $t-2.2	{same}	{*}[{*}$std ?foo=x]	-body { reuri::query unset q foo; set q		} -result {}
test $t-2.3	{multi}	{*}[{*}$std ?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::query unset q a; set q		} -result x=y&foo=bar
test $t-2.4	{multi}	{*}[{*}$std ?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::query unset q a foo; set q	} -result x=y
test $t-2.5	{nop}	{*}[{*}$std ?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::query unset q; set q			} -result ?a=1&x=y&a=2&foo=bar&a=3
test $t-3.1	{index}	{*}[{*}$std ?foo=x]	-body { reuri::query unset q foo; reuri::query values $q foo	} -result {}
test $t-4.1	{encoding}	{*}[{*}$std {f%3do=bar&x=y}]	-body { reuri::query unset q f=o				} -result x=y
test $t-4.2	{unicode}	{*}[{*}$std {f%00o=bar&x=y}]	-body { reuri::query unset q f\0o				} -result x=y
test $t-6.1	{trace} -setup { #<<<
	unset -nocomplain q
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query unset q f\0o] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace: trace:]
#>>>
test $t-6.2	{trace} -setup { #<<<
	set q	{}
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query unset q f\0o] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace: trace:]
#>>>
test $t-6.3	{trace} -setup { #<<<
	set q	x=y
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query unset q f\0o] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace:x=y trace:x=y]
#>>>

set t	uri_query_unset
set std	{apply {init {list -setup [list set u $init] -cleanup {unset -nocomplain u}}}}
test $t-0.1 {var not set}	-setup {unset -nocomplain u} -body {reuri::uri query unset u foo; set u						} -result {}							-cleanup {unset -nocomplain u}
test $t-0.2 {dup}			-setup {set u /xyz?x=y&foo=bar}  -body {set d $u; reuri::uri query unset u foo; list $d $u	} -result {/xyz?x=y&foo=bar /xyz?x=y}	-cleanup {unset -nocomplain d u}
test $t-1.1	{empty}	{*}[{*}$std {}]		-body { list [reuri::uri query unset u foo] $u	} -result {{} {}}
test $t-1.2	{empty}	{*}[{*}$std ?]		-body { list [reuri::uri query unset u foo] $u	} -result {{} {}}
test $t-2.1	{other}	{*}[{*}$std ?x=y]	-body { reuri::uri query unset u foo; set u		} -result ?x=y
test $t-2.2	{same}	{*}[{*}$std ?foo=x]	-body { reuri::uri query unset u foo; set u		} -result {}
test $t-2.3	{multi}	{*}[{*}$std /x?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::uri query unset u a; set u		} -result /x?x=y&foo=bar
test $t-2.4	{multi}	{*}[{*}$std /x?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::uri query unset u a foo; set u	} -result /x?x=y
test $t-2.5	{nop}	{*}[{*}$std /x?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::uri query unset u; set u			} -result /x?a=1&x=y&a=2&foo=bar&a=3
test $t-3.1	{index}	{*}[{*}$std /x?foo=x]	-body { reuri::uri query unset u foo; reuri::uri query values $u foo	} -result {}
test $t-4.1	{encoding}	{*}[{*}$std {/x?f%3do=bar&x=y}]	-body { reuri::uri query unset u f=o				} -result /x?x=y
test $t-4.2	{unicode}	{*}[{*}$std {/x?f%00o=bar&x=y}]	-body { reuri::uri query unset u f\0o				} -result /x?x=y
test $t-6.1	{trace} -setup { #<<<
	unset -nocomplain u
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query unset u f\0o] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace: trace:]
#>>>
test $t-6.2	{trace} -setup { #<<<
	set u	{}
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query unset u f\0o] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace: trace:]
#>>>
test $t-6.3	{trace} -setup { #<<<
	set u	/x?x=y
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query unset u f\0o] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace:/x?x=y trace:/x?x=y]
#>>>

set t	query_set
set std	{apply {init {list -setup [list set q $init] -cleanup {unset -nocomplain q}}}}
test $t-0.1 {var not set}	-setup {unset -nocomplain q} -body {reuri::query set q foo bar; set q			} -result {foo=bar}							-cleanup {unset -nocomplain q}
test $t-0.2 {dup}			-setup {set q x=y&foo=bar}  -body {set d $q; reuri::query set q a b; list $d $q	} -result {x=y&foo=bar x=y&foo=bar&a=b}		-cleanup {unset -nocomplain d q}
test $t-0.3 {dup}			-setup {set q ?x=y&foo=bar} -body {set d $q; reuri::query set q a b; list $d $q	} -result {?x=y&foo=bar x=y&foo=bar&a=b}	-cleanup {unset -nocomplain d q}
test $t-0.4 {dup}			-setup {set q x=y&foo=bar}  -body {set d $q; reuri::query set q a b; list $d $q	} -result {x=y&foo=bar x=y&foo=bar&a=b}		-cleanup {unset -nocomplain d q}
test $t-1.1	{empty}	{*}[{*}$std {}]		-body { list [reuri::query set q foo bar] $q	} -result {foo=bar foo=bar}
test $t-1.2	{empty}	{*}[{*}$std ?]		-body { list [reuri::query set q foo bar] $q	} -result {foo=bar foo=bar}
test $t-2.1	{other}	{*}[{*}$std ?x=y]	-body { reuri::query set q foo bar; set q		} -result x=y&foo=bar
test $t-2.2	{same}	{*}[{*}$std ?foo=x]	-body { reuri::query set q foo bar; set q		} -result foo=bar
test $t-2.3	{multi}	{*}[{*}$std ?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::query set q a 4; set q		} -result a=4&x=y&foo=bar
test $t-2.4	{multi}	{*}[{*}$std ?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::query set q foo x; set q		} -result a=1&x=y&a=2&foo=x&a=3
test $t-3.1	{index}	{*}[{*}$std ?foo=x]						-body { reuri::query set q foo y; reuri::query values $q foo	} -result y
test $t-4.1	{encoding}	{*}[{*}$std f%3do=bar&x=y]	-body { reuri::query set q f=o	z			} -result f%3Do=z&x=y
test $t-4.2	{unicode}	{*}[{*}$std f%00o=bar&x=y]	-body { reuri::query set q f\0o	z			} -result f%00o=z&x=y
test $t-6.1	{trace} -setup { #<<<
	unset -nocomplain q
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query set q f\0o z] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace:f%00o=z trace:f%00o=z]
#>>>
test $t-6.2	{trace} -setup { #<<<
	set q	{}
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query set q f\0o z] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace:f%00o=z trace:f%00o=z]
#>>>
test $t-6.3	{trace} -setup { #<<<
	set q	x=y
	trace add variable q write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::query set q f\0o z] $q
} -cleanup {
	unset -nocomplain q
} -result [list trace:x=y&f%00o=z trace:x=y&f%00o=z]
#>>>

set t	uri_query_set
set std	{apply {init {list -setup [list set u $init] -cleanup {unset -nocomplain u}}}}
test $t-0.1 {var not set}	-setup {unset -nocomplain u} -body {reuri::uri query set u foo bar; set u				} -result {?foo=bar}							-cleanup {unset -nocomplain u}
test $t-0.2 {dup}			-setup {set u ?x=y&foo=bar}  -body {set d $u; reuri::uri query set u a b; list $d $u	} -result {?x=y&foo=bar ?x=y&foo=bar&a=b}		-cleanup {unset -nocomplain d u}
test $t-0.3 {dup}			-setup {set u /x?x=y&foo=bar} -body {set d $u; reuri::uri query set u a b; list $d $u	} -result {/x?x=y&foo=bar /x?x=y&foo=bar&a=b}	-cleanup {unset -nocomplain d u}
test $t-1.1	{empty}	{*}[{*}$std {}]		-body { list [reuri::uri query set u foo bar] $u	} -result {?foo=bar ?foo=bar}
test $t-1.2	{empty}	{*}[{*}$std ?]		-body { list [reuri::uri query set u foo bar] $u	} -result {?foo=bar ?foo=bar}
test $t-2.1	{other}	{*}[{*}$std ?x=y]	-body { reuri::uri query set u foo bar; set u		} -result ?x=y&foo=bar
test $t-2.2	{same}	{*}[{*}$std ?foo=x]	-body { reuri::uri query set u foo bar; set u		} -result ?foo=bar
test $t-2.3	{multi}	{*}[{*}$std ?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::uri query set u a 4; set u		} -result ?a=4&x=y&foo=bar
test $t-2.4	{multi}	{*}[{*}$std ?a=1&x=y&a=2&foo=bar&a=3]	-body { reuri::uri query set u foo x; set u		} -result ?a=1&x=y&a=2&foo=x&a=3
test $t-3.1	{index}	{*}[{*}$std ?foo=x]						-body { reuri::uri query set u foo y; reuri::uri query values $u foo	} -result y
test $t-4.1	{encoding}	{*}[{*}$std ?f%3do=bar&x=y]		-body { reuri::uri query set u f=o	z			} -result ?f%3Do=z&x=y
test $t-4.2	{unicode}	{*}[{*}$std /xyz?f%00o=bar&x=y]	-body { reuri::uri query set u f\0o	z			} -result /xyz?f%00o=z&x=y
test $t-6.1	{trace} -setup { #<<<
	unset -nocomplain u
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query set u f\0o z] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace:?f%00o=z trace:?f%00o=z]
#>>>
test $t-6.2	{trace} -setup { #<<<
	set u	{}
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query set u f\0o z] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace:?f%00o=z trace:?f%00o=z]
#>>>
test $t-6.3	{trace} -setup { #<<<
	set u	/abc?x=y
	trace add variable u write {apply {{n1 n2 op} { upvar 1 $n1 v; set v trace:$v }}}
} -body {
	list [reuri::uri query set u f\0o z] $u
} -cleanup {
	unset -nocomplain u
} -result [list trace:/abc?x=y&f%00o=z trace:/abc?x=y&f%00o=z]
#>>>

# cleanup
::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
